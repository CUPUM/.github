name: Add Issue to GitHub Project (Org-Wide)
on:
  workflow_call:
    secrets:
      ORG_PAT:
        required: true  # âœ… Ensures secret is passed from the calling workflow

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      repository-projects: write
      contents: read

    steps:
      - name: Authenticate GitHub CLI
        run: |
          echo "GH_TOKEN=${{ secrets.ORG_PAT }}" >> $GITHUB_ENV
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT }}

      - name: Extract Issue Data
        id: extract_data
        run: |
          ISSUE_BODY=$(jq -r '.issue.body' <<< '${{ toJson(github.event) }}')

          FIRST_NAME=$(echo "$ISSUE_BODY" | awk -F'### First' '{print $2}' | awk 'NR==1{print $1}')
          LAST_NAME=$(echo "$ISSUE_BODY" | awk -F'### Last' '{print $2}' | awk 'NR==1{print $1}')
          ORGANIZATION=$(echo "$ISSUE_BODY" | awk -F'### Organization' '{print $2}' | awk 'NR==1{print $1}')

          echo "FIRST_NAME=$FIRST_NAME" >> $GITHUB_ENV
          echo "LAST_NAME=$LAST_NAME" >> $GITHUB_ENV
          echo "ORGANIZATION=$ORGANIZATION" >> $GITHUB_ENV

      - name: Get Issue ID
        run: |
          ISSUE_ID=$(gh api graphql -f query='query {
            repository(owner:"CUPUM", name:"${{ github.event.repository.name }}") {
              issue(number: ${{ github.event.issue.number }}) {
                id
              }
            }
          }' --jq '.data.repository.issue.id')

          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV

      - name: Add Issue to Project
        run: |
          ITEM_ID=$(gh api graphql -f query='
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
              item {
                id
              }
            }
          }' -F projectId="$PROJECT_ID" -F contentId="$ISSUE_ID" --jq '.data.addProjectV2ItemById.item.id')

          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      - name: Update Fields
        run: |
          gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldName: String!, $value: String!) {
            updateProjectV2ItemFieldValueByName(input: {
              projectId: $projectId
              itemId: $itemId
              fieldName: $fieldName
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' -F projectId="$PROJECT_ID" -F itemId="$ITEM_ID" -F fieldName="First Name" -F value="$FIRST_NAME"

          gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldName: String!, $value: String!) {
            updateProjectV2ItemFieldValueByName(input: {
              projectId: $projectId
              itemId: $itemId
              fieldName: $fieldName
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' -F projectId="$PROJECT_ID" -F itemId="$ITEM_ID" -F fieldName="Last Name" -F value="$LAST_NAME"

          gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldName: String!, $value: String!) {
            updateProjectV2ItemFieldValueByName(input: {
              projectId: $projectId
              itemId: $itemId
              fieldName: $fieldName
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' -F projectId="$PROJECT_ID" -F itemId="$ITEM_ID" -F fieldName="Organization" -F value="$ORGANIZATION"
