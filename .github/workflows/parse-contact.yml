name: Parse Contact Form
on:
  workflow_call:

jobs:
  parse_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set GH_TOKEN from ORG_PAT
        run: echo "GH_TOKEN=${{ secrets.ORG_PAT }}" >> $GITHUB_ENV
        env:
          ORG_PAT: ${{ secrets.ORG_PAT }}

      - name: Debug GH_TOKEN Before Authentication
        run: |
          if [[ -z "$GH_TOKEN" ]]; then
            echo "‚ùå ERROR: GH_TOKEN is empty!"
            exit 1
          fi
          echo "‚úÖ GH_TOKEN is set."

      - name: Check Authentication Status
        run: |
          echo "üîç Checking authentication with gh auth status..."
          gh auth status || { echo "‚ùå ERROR: Not authenticated!"; exit 1; }
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT }}

      - name: Retrieve Project Node ID
        id: get_project_id
        run: |
          PROJECT_NODE_ID=$(gh api graphql -F organization="CUPUM" -f query='
          query($organization: String!) {
            organization(login: $organization) {
              projectV2(number: 179) {
                id
              }
            }
          }' --jq '.data.organization.projectV2.id')

          if [[ -z "$PROJECT_NODE_ID" ]]; then
            echo "‚ùå ERROR: Failed to retrieve project node ID!"
            exit 1
          fi

          echo "‚úÖ Project Node ID: $PROJECT_NODE_ID"
          echo "PROJECT_NODE_ID=$PROJECT_NODE_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT }}

      - name: Extract Issue Form Data
        id: extract
        run: |
          ISSUE_BODY=$(jq -r '.issue.body' <<< '${{ toJson(github.event) }}')

          FIRST_NAME=$(echo "$ISSUE_BODY" | awk -F "\*\*First Name\*\*" '{print $2}' | awk -F "\n" '{print $1}' | xargs)
          LAST_NAME=$(echo "$ISSUE_BODY" | awk -F "\*\*Last Name\*\*" '{print $2}' | awk -F "\n" '{print $1}' | xargs)
          ORGANIZATION=$(echo "$ISSUE_BODY" | awk -F "\*\*Organization\*\*" '{print $2}' | awk -F "\n" '{print $1}' | xargs)

          echo "FIRST_NAME=$FIRST_NAME" >> $GITHUB_ENV
          echo "LAST_NAME=$LAST_NAME" >> $GITHUB_ENV
          echo "ORGANIZATION=$ORGANIZATION" >> $GITHUB_ENV

      - name: Get Issue ID
        id: get_issue_id
        run: |
          ISSUE_ID=$(gh issue view ${{ github.event.issue.number }} --json id --jq '.id')
          if [[ -z "$ISSUE_ID" ]]; then
            echo "‚ùå ERROR: Failed to retrieve ISSUE_ID!"
            exit 1
          fi
          echo "‚úÖ Retrieved ISSUE_ID: $ISSUE_ID"
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT }}

      - name: Assign Issue to GitHub Project
        run: |
          echo "üîÑ Adding issue to project..."
          ITEM_ID=$(gh api graphql --method POST -F projectId="$PROJECT_NODE_ID" -F contentId="$ISSUE_ID" -f query='
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
              item {
                id
              }
            }
          }' | jq -r '.data.addProjectV2ItemById.item.id')

          if [[ -z "$ITEM_ID" || "$ITEM_ID" == "null" ]]; then
            echo "‚ùå ERROR: Failed to add issue to project. ITEM_ID is null!"
            exit 1
          fi

          echo "‚úÖ Added issue to project with ITEM_ID: $ITEM_ID"

          echo "üîÑ Updating project fields..."
          gh api graphql --method POST -F projectId="$PROJECT_NODE_ID" -F itemId="$ITEM_ID" -F fieldId="first_name" -F value="$FIRST_NAME" -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId
              itemId: $itemId
              fieldId: $fieldId
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' || { echo "‚ùå ERROR: Failed to update First Name field"; exit 1; }

          gh api graphql --method POST -F projectId="$PROJECT_NODE_ID" -F itemId="$ITEM_ID" -F fieldId="last_name" -F value="$LAST_NAME" -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId
              itemId: $itemId
              fieldId: $fieldId
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' || { echo "‚ùå ERROR: Failed to update Last Name field"; exit 1; }

          gh api graphql --method POST -F projectId="$PROJECT_NODE_ID" -F itemId="$ITEM_ID" -F fieldId="organization" -F value="$ORGANIZATION" -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId
              itemId: $itemId
              fieldId: $fieldId
              value: { text: $value }
            }) {
              clientMutationId
            }
          }' || { echo "‚ùå ERROR: Failed to update Organization field"; exit 1; }

          echo "‚úÖ Successfully updated all fields."
        env:
          GH_TOKEN: ${{ secrets.ORG_PAT }}
